{"version":3,"sources":["webpack:///./dashboard.js"],"names":[],"mappings":";;;;;;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA,KAAK;;AAEL,mBAAmB,0CAA0C;AAC7D;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA,GAAG;AACH,CAAC","file":"dashboard.js","sourcesContent":["'use strict';\n\nvar app  = require('./app'),\n    main = require('./main')(app);\n\n(function(app) {\n  app.startup.push(function() {\n\n    app.listeners.addTagInputEvents = function(tagInputElement) {\n      tagInputElement.addEventListener('focus', app.events.editNewTag);\n      tagInputElement.addEventListener('blur', app.events.leaveTag);\n      tagInputElement.addEventListener('keydown', app.events.finishTag);\n    };\n\n    app.listeners.addTagRemovalEvents = function(tag) {\n      tag.querySelector('.removeTag').addEventListener('click', app.events.removeTag);\n    };\n\n    // create an array of existing tags\n    app.elements.tags = Array.prototype.slice.call(document.querySelectorAll('.tag[id]'));\n\n    // create an array of tag input elements\n    app.elements.tagInputElements = Array.prototype.slice.call(document.querySelectorAll('.tag.add-new'));\n\n    app.events.removeTag = function(event) {\n      var tag = event.target.parentNode;\n\n      app.io.emit('dashboard.removeTag', {\n        tag:     tag.id,\n        invoice: tag.parentNode.parentNode.id\n      });\n    };\n\n    app.events.editNewTag = function(event) {\n\n      // remove plus icon\n      var plusIcon = event.target.getElementsByTagName('span');\n      if (plusIcon.length > 0) {\n        event.target.removeChild(plusIcon[ 0 ]);\n      }\n    };\n\n    app.events.finishTag = function(event) {\n      switch (event.keyCode) {\n        case 13: // Enter\n        case 9:  // Tab\n        case 32: // Space\n          event.preventDefault();\n\n          // if the next element is also a tag input\n          if (\n            (!event.target.nextSibling.nodeName === '#text') &&\n            (event.target.nextSibling.classList.contains('tag'))\n          ) {\n            event.target.nextSibling.focus();\n          }\n\n          // save the tag\n          app.connectors.saveTag(event.target);\n\n          // add a new tag input\n          app.events.addNewTag({\n            target: event.target\n          });\n\n          return false;\n      }\n    };\n\n    app.events.addNewTag = function(event) {\n      /*var newTagInput = app.helpers.createNode('div', {\n       contentEditable: 'true',\n       class:           'tag editable add-new'\n       }, app.helpers.createNode('span', {\n       class: 'fa fa-plus'\n       })\n       );*/\n      var newTagInput = app.templates.tagInput;\n\n      // add event listeners\n      app.listeners.addTagInputEvents(newTagInput);\n\n      event.target.blur();\n\n      // insert new node after current input\n      event.target.parentNode.insertBefore(newTagInput, event.target.nextSibling);\n\n      // focus the next input\n      newTagInput.focus();\n\n      // push the tag input into the stack\n      app.elements.tagInputElements.push(newTagInput);\n    };\n\n    app.events.leaveTag = function(event) {\n      event.target.blur();\n\n      // if the tag was left without text being added, insert plus icon again\n      if (!event.target.textContent) {\n        event.target.appendChild(app.helpers.createNode('span', {\n          class: 'fa fa-plus'\n        }))\n      } else {\n        /**\n         * TODO: When leaving an input using a mouse click, no new input is created but needs to be\n         */\n        /*    if (event.target.nextSibling.nodeName !== 'DIV') {\n         var newTagInput = app.helpers.createNode('div', {\n         contentEditable: 'true',\n         class:           'tag editable add-new'\n         }, app.helpers.createNode('span', {\n         class: 'fa fa-plus'\n         })\n         );\n\n         // add event listeners\n         app.listeners.addTagInputEvents(newTagInput);\n\n         // insert new node after current input\n         event.target.parentNode.insertBefore(newTagInput, event.target.nextSibling);\n\n         // push the tag input into the stack\n         app.elements.tagInputElements.push(newTagInput);\n\n         }\n         */\n      }\n\n    };\n\n    app.connectors.saveTag = function(tag) {\n      app.io.emit('dashboard.saveTag', {\n        tagName: tag.textContent,\n        invoice: event.target.parentNode.parentNode.getAttribute('id')\n      }, function(error, savedTag) {\n        if (error) {\n          console.error(error);\n          return tag.remove();\n        }\n\n        // add tag color\n        tag.classList.add('tag-' + savedTag.color);\n        tag.classList.remove.apply(tag.classList, [ 'editable', 'add-new' ]);\n        tag.setAttribute('contenteditable', 'false');\n\n        console.log('Tag %s successfully saved.', tag.textContent);\n      });\n    };\n\n    app.connectors.changeTagColor = function(tag, newColor) {\n      app.io.emit('dashboard.updateTagColor', {\n        tagId:    tag.id,\n        newColor: newColor\n      }, function(error, tag) {\n        if (error) {\n          return console.log(error);\n        }\n\n        var searchTag = tag.textContent.trim(),\n            currentTags = [];\n        for (var i = 0; i < blackTags.length; i++) {\n          if (blackTags[i].textContent == 'Baumarkt') {\n            BaumarktTags.push(blackTags[i]);\n          }\n        }\n\n        document.getElementById('577aaea4820862942e3b4768').classList.add('tag-' + tag.color);\n        document.getElementById('577aaea4820862942e3b4768').classList.remove('tag-pink');\n      });\n    };\n\n    app.templates.tagInput = (function() {\n      var newTag = app.helpers.createNode('span', {\n        contentEditable: 'true',\n        class:           'tag editable add-new'\n      });\n\n      newTag.appendChild(app.helpers.createNode('span', {\n        class: 'fa fa-plus'\n      }));\n\n      return newTag;\n    })();\n\n    for (var i = 0; i < app.elements.tagInputElements.length; i++) {\n      app.listeners.addTagInputEvents(app.elements.tagInputElements[ i ]);\n    }\n\n    for (var j = 0; j < app.elements.tags; j++) {\n      app.listeners.addTagRemovalEvents(app.elements.tags[ i ]);\n    }\n  });\n})(app);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dashboard.js\n// module id = 231\n// module chunks = 8"],"sourceRoot":""}